// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Module;

#nullable disable

namespace AppMigration.SqlServer.Module
{
    [DbContext(typeof(ModuleDbContext))]
    partial class ModuleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("module")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Module.Domain.BusinessDomain.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleDataId")
                        .IsUnique();

                    b.ToTable("Tasks", "module");
                });

            modelBuilder.Entity("Module.Domain.Data.ModuleData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkSpaceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("WorkSpaceDataId");

                    b.ToTable("ModuleData", "module");
                });

            modelBuilder.Entity("Module.Domain.Data.PropertyData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateValue")
                        .HasColumnType("date");

                    b.Property<decimal?>("DecimalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("float");

                    b.Property<Guid?>("GuidValue")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IntValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModuleDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemPropertyPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkspaceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleDataId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("WorkspaceDataId");

                    b.ToTable("PropertyData", "module");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceConnectionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SourceWorkspaceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetWorkspaceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SourceWorkspaceDataId");

                    b.HasIndex("TargetWorkspaceDataId");

                    b.HasIndex("WorkspaceConnectionId");

                    b.ToTable("WorkspaceConnectionData", "module");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceData", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.AppAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ValidationFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkspaceModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("WorkspaceModuleId");

                    b.ToTable("AppActions", "module");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63e6138a-2903-4500-a2e8-15af07867df3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "{\"En\":\"Create\",\"Ar\":\"\\u0627\\u0636\\u0627\\u0641\\u0629\"}",
                            IsDeleted = false,
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            Name = "{\"En\":\"Create\",\"Ar\":\"\\u0627\\u0636\\u0627\\u0641\\u0629\"}",
                            Type = "Create"
                        },
                        new
                        {
                            Id = new Guid("62e6138a-2903-4500-a2e8-15af07867df3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "{\"En\":\"Update\",\"Ar\":\"\\u062A\\u0639\\u062F\\u064A\\u0644\"}",
                            IsDeleted = false,
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            Name = "{\"En\":\"Update\",\"Ar\":\"\\u062A\\u0639\\u062F\\u064A\\u0644\"}",
                            Type = "Update"
                        },
                        new
                        {
                            Id = new Guid("65e6118a-2903-4500-a2e8-15af07867df3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "{\"En\":\"Delete\",\"Ar\":\"\\u062D\\u0630\\u0641\"}",
                            IsDeleted = false,
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            Name = "{\"En\":\"Delete\",\"Ar\":\"\\u062D\\u0630\\u0641\"}",
                            Type = "Delete"
                        },
                        new
                        {
                            Id = new Guid("66e6118a-2903-4500-a2e8-15af07867df3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "{\"En\":\"Read\",\"Ar\":\"\\u0645\\u0639\\u0627\\u064A\\u0646\\u0629\"}",
                            IsDeleted = false,
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            Name = "{\"En\":\"Read\",\"Ar\":\"\\u0645\\u0639\\u0627\\u064A\\u0646\\u0629\"}",
                            Type = "Read"
                        });
                });

            modelBuilder.Entity("Module.Domain.Schema.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Applications", "module");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-47ae-8eb7-d1e1e83a6f9c"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "{\r\n  \"en\": \"Manage all your organizational assets and their details.\",\r\n  \"ar\": \"إدارة جميع أصول مؤسستك وتفاصيلها\"\r\n}",
                            Icon = "fa-solid fa-warehouse",
                            Title = "{\r\n  \"en\": \"Asset Management\",\r\n  \"ar\": \"إداره المرافق\"\r\n}"
                        });
                });

            modelBuilder.Entity("Module.Domain.Schema.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Modules", "module");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            ApplicationId = new Guid("a1b2c3d4-e5f6-47ae-8eb7-d1e1e83a6f9c"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            Details = "{\"En\":\"\\u062A\\u0641\\u0627\\u0635\\u064A\\u0644\",\"Ar\":\"Details\"}",
                            Domain = "Module.Domain.BusinessDomain.Task",
                            IsActive = true,
                            IsDeleted = false,
                            Key = "Task",
                            Order = 1,
                            Title = "{\"En\":\"\\u0627\\u0644\\u0645\\u0647\\u0627\\u0645\",\"Ar\":\"Tasks\"}",
                            Type = "Basic"
                        });
                });

            modelBuilder.Entity("Module.Domain.Schema.ModuleBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ModuleBlocks", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.ModuleBlockModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleBlockId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleBlockModules", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTranslatable")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("SystemPropertyPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ViewType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkspaceModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("WorkspaceModuleId");

                    b.ToTable("Properties", "module");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2392d348-6af0-4b67-9271-ba6a8aeebed0"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "DateTime",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "project_created_at",
                            NormalizedKey = "CREATED_AT",
                            Order = 8,
                            SystemPropertyPath = "CreatedAt",
                            Title = "{\"En\":\"Created At\",\"Ar\":\"\\u062A\\u0627\\u0631\\u064A\\u062E \\u0627\\u0644\\u0625\\u0646\\u0634\\u0627\\u0621\"}",
                            ViewType = "DateTime",
                            WorkspaceId = new Guid("e9a8748e-41d5-4c31-9c5c-52a10c4f7420")
                        },
                        new
                        {
                            Id = new Guid("fb23f579-e069-4ecc-bbfd-58ebe8dd2350"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "Guid",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "project_created_by",
                            NormalizedKey = "CREATED_BY",
                            Order = 9,
                            SystemPropertyPath = "CreatedBy",
                            Title = "{\"En\":\"Created By\",\"Ar\":\"\\u062A\\u0645 \\u0627\\u0644\\u0625\\u0646\\u0634\\u0627\\u0621 \\u0628\\u0648\\u0627\\u0633\\u0637\\u0629\"}",
                            ViewType = "User",
                            WorkspaceId = new Guid("e9a8748e-41d5-4c31-9c5c-52a10c4f7420")
                        },
                        new
                        {
                            Id = new Guid("2224fae6-3dff-45c9-8fd2-6996fb14e9e0"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "DateTime",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "project_updated_at",
                            NormalizedKey = "UPDATED_AT",
                            Order = 10,
                            SystemPropertyPath = "UpdatedAt",
                            Title = "{\"En\":\"Updated At\",\"Ar\":\"\\u062A\\u0627\\u0631\\u064A\\u062E \\u0627\\u0644\\u062A\\u062D\\u062F\\u064A\\u062B\"}",
                            ViewType = "DateTime",
                            WorkspaceId = new Guid("e9a8748e-41d5-4c31-9c5c-52a10c4f7420")
                        },
                        new
                        {
                            Id = new Guid("a73e4ce5-50b6-4a79-a979-81722b6d4352"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "Guid",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "project_updated_by",
                            NormalizedKey = "UPDATED_BY",
                            Order = 11,
                            SystemPropertyPath = "UpdatedBy",
                            Title = "{\"En\":\"Updated By\",\"Ar\":\"\\u062A\\u0645 \\u0627\\u0644\\u062A\\u062D\\u062F\\u064A\\u062B \\u0628\\u0648\\u0627\\u0633\\u0637\\u0629\"}",
                            ViewType = "User",
                            WorkspaceId = new Guid("e9a8748e-41d5-4c31-9c5c-52a10c4f7420")
                        },
                        new
                        {
                            Id = new Guid("71c58090-d4c0-4bee-8b9b-417f938de7f4"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "DateTime",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "project_deleted_at",
                            NormalizedKey = "DELETED_AT",
                            Order = 12,
                            SystemPropertyPath = "DeletedAt",
                            Title = "{\"En\":\"Deleted At\",\"Ar\":\"\\u062A\\u0627\\u0631\\u064A\\u062E \\u0627\\u0644\\u062D\\u0630\\u0641\"}",
                            ViewType = "DateTime",
                            WorkspaceId = new Guid("e9a8748e-41d5-4c31-9c5c-52a10c4f7420")
                        },
                        new
                        {
                            Id = new Guid("f2a4b262-5e35-4ce7-98ca-e4af8c08cc60"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "Guid",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "project_deleted_by",
                            NormalizedKey = "DELETED_BY",
                            Order = 13,
                            SystemPropertyPath = "DeletedBy",
                            Title = "{\"En\":\"Deleted By\",\"Ar\":\"\\u062A\\u0645 \\u0627\\u0644\\u062D\\u0630\\u0641 \\u0628\\u0648\\u0627\\u0633\\u0637\\u0629\"}",
                            ViewType = "User",
                            WorkspaceId = new Guid("e9a8748e-41d5-4c31-9c5c-52a10c4f7420")
                        },
                        new
                        {
                            Id = new Guid("9d6b2976-c5ea-4c7a-91e7-c684f3b57f33"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "String",
                            IsCalculated = false,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = true,
                            Key = "task_title",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "TITLE",
                            Order = 1,
                            SystemPropertyPath = "Title",
                            Title = "{\"En\":\"Title\",\"Ar\":\"\\u0627\\u0644\\u0639\\u0646\\u0648\\u0627\\u0646\"}",
                            ViewType = "Text"
                        },
                        new
                        {
                            Id = new Guid("f1f61de5-c906-4a0e-8a79-37a119fb6a54"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "Guid",
                            IsCalculated = false,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "task_assignedto",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "ASSIGNDTO",
                            Order = 2,
                            SystemPropertyPath = "AssigndTo",
                            Title = "{\"En\":\"Assigned To\",\"Ar\":\"\\u0645\\u0633\\u0646\\u062F \\u0625\\u0644\\u0649\"}",
                            ViewType = "User"
                        },
                        new
                        {
                            Id = new Guid("b653054d-75a9-4c48-9fe8-c5704459e578"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "DateOnly",
                            IsCalculated = false,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "task_duedate",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "DUEDATE",
                            Order = 3,
                            SystemPropertyPath = "DueDate",
                            Title = "{\"En\":\"Due Date\",\"Ar\":\"\\u062A\\u0627\\u0631\\u064A\\u062E \\u0627\\u0644\\u0627\\u0633\\u062A\\u062D\\u0642\\u0627\\u0642\"}",
                            ViewType = "Date"
                        },
                        new
                        {
                            Id = new Guid("63e6128a-2903-4500-a2e8-15af07867df3"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "DateTime",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "task_created_at",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "CREATED_AT",
                            Order = 4,
                            SystemPropertyPath = "CreatedAt",
                            Title = "{\"En\":\"Created At\",\"Ar\":\"\\u062A\\u0627\\u0631\\u064A\\u062E \\u0627\\u0644\\u0625\\u0646\\u0634\\u0627\\u0621\"}",
                            ViewType = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("e0a3bbff-5314-41fe-9a9d-5b13b2151a67"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "Guid",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "task_created_by",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "CREATED_BY",
                            Order = 5,
                            SystemPropertyPath = "CreatedBy",
                            Title = "{\"En\":\"Created By\",\"Ar\":\"\\u062A\\u0645 \\u0627\\u0644\\u0625\\u0646\\u0634\\u0627\\u0621 \\u0628\\u0648\\u0627\\u0633\\u0637\\u0629\"}",
                            ViewType = "User"
                        },
                        new
                        {
                            Id = new Guid("1894b31a-c4c4-411e-b116-e3d3ea0d5124"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "DateTime",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "task_updated_at",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "UPDATED_AT",
                            Order = 6,
                            SystemPropertyPath = "UpdatedAt",
                            Title = "{\"En\":\"Updated At\",\"Ar\":\"\\u062A\\u0627\\u0631\\u064A\\u062E \\u0627\\u0644\\u062A\\u062D\\u062F\\u064A\\u062B\"}",
                            ViewType = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("81cc79f8-200b-49bc-ac71-b6d2e19b4cc4"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "Guid",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "task_updated_by",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "UPDATED_BY",
                            Order = 7,
                            SystemPropertyPath = "UpdatedBy",
                            Title = "{\"En\":\"Updated By\",\"Ar\":\"\\u062A\\u0645 \\u0627\\u0644\\u062A\\u062D\\u062F\\u064A\\u062B \\u0628\\u0648\\u0627\\u0633\\u0637\\u0629\"}",
                            ViewType = "User"
                        },
                        new
                        {
                            Id = new Guid("ee82a724-8aa7-412d-add7-cfc25b4d15f6"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "DateTime",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "task_deleted_at",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "DELETED_AT",
                            Order = 8,
                            SystemPropertyPath = "DeletedAt",
                            Title = "{\"En\":\"Deleted At\",\"Ar\":\"\\u062A\\u0627\\u0631\\u064A\\u062E \\u0627\\u0644\\u062D\\u0630\\u0641\"}",
                            ViewType = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("64b8369e-497f-462d-bc30-ac97c3e43b30"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataType = "Guid",
                            IsCalculated = true,
                            IsDeleted = false,
                            IsEncrypted = false,
                            IsInternal = true,
                            IsSystem = true,
                            IsTranslatable = false,
                            Key = "task_deleted_by",
                            ModuleId = new Guid("89a9748e-41d5-4c31-9c5c-52a10c4f7419"),
                            NormalizedKey = "DELETED_BY",
                            Order = 9,
                            SystemPropertyPath = "DeletedBy",
                            Title = "{\"En\":\"Deleted By\",\"Ar\":\"\\u062A\\u0645 \\u0627\\u0644\\u062D\\u0630\\u0641 \\u0628\\u0648\\u0627\\u0633\\u0637\\u0629\"}",
                            ViewType = "User"
                        });
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.PropertyConnection", b =>
                {
                    b.Property<Guid>("SourcePropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SourcePropertyId", "TargetPropertyId");

                    b.HasIndex("TargetPropertyId");

                    b.ToTable("PropertyConnections", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.PropertyFormula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConditional")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFormulas", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.ValidationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("ValidationRules", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Workspaces", "module");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9a8748e-41d5-4c31-9c5c-52a10c4f7420"),
                            ApplicationId = new Guid("a1b2c3d4-e5f6-47ae-8eb7-d1e1e83a6f9c"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            Details = "{\"En\":\"Project\",\"Ar\":\"\\u0645\\u0634\\u0631\\u0648\\u0639\"}",
                            IsDeleted = false,
                            Key = "PROJECT",
                            Order = 1,
                            Title = "{\"En\":\"Project\",\"Ar\":\"\\u0645\\u0634\\u0631\\u0648\\u0639\"}",
                            Type = "Basic"
                        });
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowManySource")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SourceWorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetWorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SourceWorkspaceId");

                    b.HasIndex("TargetWorkspaceId");

                    b.ToTable("WorkspaceConnection", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceModules", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModuleBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleBlockId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceModuleBlocks", "module");
                });

            modelBuilder.Entity("Module.Domain.BusinessDomain.Task", b =>
                {
                    b.HasOne("Module.Domain.Data.ModuleData", "ModuleData")
                        .WithOne()
                        .HasForeignKey("Module.Domain.BusinessDomain.Task", "ModuleDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleData");
                });

            modelBuilder.Entity("Module.Domain.Data.ModuleData", b =>
                {
                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Data.WorkspaceData", "WorkspaceData")
                        .WithMany()
                        .HasForeignKey("WorkSpaceDataId");

                    b.Navigation("Module");

                    b.Navigation("WorkspaceData");
                });

            modelBuilder.Entity("Module.Domain.Data.PropertyData", b =>
                {
                    b.HasOne("Module.Domain.Data.ModuleData", "ModuleData")
                        .WithMany("PropertyData")
                        .HasForeignKey("ModuleDataId");

                    b.HasOne("Module.Domain.Schema.Properties.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Data.WorkspaceData", "WorkspaceData")
                        .WithMany("PropertyData")
                        .HasForeignKey("WorkspaceDataId");

                    b.Navigation("ModuleData");

                    b.Navigation("Property");

                    b.Navigation("WorkspaceData");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceConnectionData", b =>
                {
                    b.HasOne("Module.Domain.Data.WorkspaceData", "SourceWorkspaceData")
                        .WithMany()
                        .HasForeignKey("SourceWorkspaceDataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Module.Domain.Data.WorkspaceData", "TargetWorkspaceData")
                        .WithMany("WorkspaceConnections")
                        .HasForeignKey("TargetWorkspaceDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.WorkspaceConnection", "WorkspaceConnection")
                        .WithMany("WorkspaceConnectionData")
                        .HasForeignKey("WorkspaceConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceWorkspaceData");

                    b.Navigation("TargetWorkspaceData");

                    b.Navigation("WorkspaceConnection");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceData", b =>
                {
                    b.HasOne("Module.Domain.Schema.Workspace", "Workspace")
                        .WithMany("WorkspaceData")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Module.Domain.Schema.AppAction", b =>
                {
                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany("Actions")
                        .HasForeignKey("ModuleId");

                    b.HasOne("Module.Domain.Schema.Workspace", "Workspace")
                        .WithMany("Actions")
                        .HasForeignKey("WorkspaceId");

                    b.HasOne("Module.Domain.Schema.WorkspaceModule", "WorkspaceModule")
                        .WithMany("Actions")
                        .HasForeignKey("WorkspaceModuleId");

                    b.Navigation("Module");

                    b.Navigation("Workspace");

                    b.Navigation("WorkspaceModule");
                });

            modelBuilder.Entity("Module.Domain.Schema.Module", b =>
                {
                    b.HasOne("Module.Domain.Schema.Application", "Application")
                        .WithMany("Modules")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Module.Domain.Schema.ModuleBlockModule", b =>
                {
                    b.HasOne("Module.Domain.Schema.ModuleBlock", "ModuleBlock")
                        .WithMany("ModuleBlockModules")
                        .HasForeignKey("ModuleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("ModuleBlock");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.Property", b =>
                {
                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany("Properties")
                        .HasForeignKey("ModuleId");

                    b.HasOne("Module.Domain.Schema.Workspace", "Workspace")
                        .WithMany("Properties")
                        .HasForeignKey("WorkspaceId");

                    b.HasOne("Module.Domain.Schema.WorkspaceModule", "WorkspaceModule")
                        .WithMany("Properties")
                        .HasForeignKey("WorkspaceModuleId");

                    b.Navigation("Module");

                    b.Navigation("Workspace");

                    b.Navigation("WorkspaceModule");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.PropertyConnection", b =>
                {
                    b.HasOne("Module.Domain.Schema.Properties.Property", "SourceProperty")
                        .WithMany("SourcePropertyConnections")
                        .HasForeignKey("SourcePropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.Properties.Property", "TargetProperty")
                        .WithMany("TargetPropertyConnections")
                        .HasForeignKey("TargetPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceProperty");

                    b.Navigation("TargetProperty");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.PropertyFormula", b =>
                {
                    b.HasOne("Module.Domain.Schema.Properties.Property", "Property")
                        .WithMany("PropertyFormulas")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.ValidationRule", b =>
                {
                    b.HasOne("Module.Domain.Schema.Properties.Property", "Property")
                        .WithMany("ValidationRules")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Module.Domain.Schema.Workspace", b =>
                {
                    b.HasOne("Module.Domain.Schema.Application", "Application")
                        .WithMany("Workspaces")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceConnection", b =>
                {
                    b.HasOne("Module.Domain.Schema.Workspace", "SourceWorkspace")
                        .WithMany()
                        .HasForeignKey("SourceWorkspaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Module.Domain.Schema.Workspace", "TargetWorkspace")
                        .WithMany()
                        .HasForeignKey("TargetWorkspaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceWorkspace");

                    b.Navigation("TargetWorkspace");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModule", b =>
                {
                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany("WorkspaceModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.Workspace", "Workspace")
                        .WithMany("WorkspaceModules")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModuleBlock", b =>
                {
                    b.HasOne("Module.Domain.Schema.ModuleBlock", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.Workspace", "Workspace")
                        .WithMany("WorkspaceModuleBlocks")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Module.Domain.Data.ModuleData", b =>
                {
                    b.Navigation("PropertyData");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceData", b =>
                {
                    b.Navigation("PropertyData");

                    b.Navigation("WorkspaceConnections");
                });

            modelBuilder.Entity("Module.Domain.Schema.Application", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Module.Domain.Schema.Module", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Properties");

                    b.Navigation("WorkspaceModules");
                });

            modelBuilder.Entity("Module.Domain.Schema.ModuleBlock", b =>
                {
                    b.Navigation("ModuleBlockModules");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.Property", b =>
                {
                    b.Navigation("PropertyFormulas");

                    b.Navigation("SourcePropertyConnections");

                    b.Navigation("TargetPropertyConnections");

                    b.Navigation("ValidationRules");
                });

            modelBuilder.Entity("Module.Domain.Schema.Workspace", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Properties");

                    b.Navigation("WorkspaceData");

                    b.Navigation("WorkspaceModuleBlocks");

                    b.Navigation("WorkspaceModules");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceConnection", b =>
                {
                    b.Navigation("WorkspaceConnectionData");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModule", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
