// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Module;

#nullable disable

namespace AppMigration.SqlServer.Module
{
    [DbContext(typeof(ModuleDbContext))]
    partial class ModuleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("module")
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Module.Domain.Data.ModuleData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModulId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModulId");

                    b.ToTable("ModuleData", "module");
                });

            modelBuilder.Entity("Module.Domain.Data.PropertyData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DecimalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("float");

                    b.Property<int?>("IntValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModuleDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkspaceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkspaceModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleDataId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("WorkspaceDataId");

                    b.HasIndex("WorkspaceModuleId");

                    b.ToTable("PropertyData", "module");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceConnectionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SourceWorkspaceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetWorkspaceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SourceWorkspaceDataId");

                    b.HasIndex("TargetWorkspaceDataId");

                    b.HasIndex("WorkspaceConnectionId");

                    b.ToTable("WorkspaceConnectionData", "module");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("WorkspaceData", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Applications", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Modules", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.ModuleBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ModuleBlocks", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.ModuleBlockModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleBlockId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleBlockModules", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModuleId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ViewType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkspaceId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkspaceModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ModuleId1");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("WorkspaceId1");

                    b.HasIndex("WorkspaceModuleId");

                    b.ToTable("Property", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.PropertyConnection", b =>
                {
                    b.Property<Guid>("SourcePropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SourcePropertyId", "TargetPropertyId");

                    b.HasIndex("TargetPropertyId");

                    b.ToTable("PropertyConnections", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.PropertyFormula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConditional")
                        .HasColumnType("bit");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFormulas", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.ValidationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("ValidationRules", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormlizedTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Workspace", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SourceWorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetWorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SourceWorkspaceId");

                    b.HasIndex("TargetWorkspaceId");

                    b.ToTable("WorkspaceConnection", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceModules", "module");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModuleBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleBlockId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceModuleBlocks", "module");
                });

            modelBuilder.Entity("Module.Domain.Data.ModuleData", b =>
                {
                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Module.Domain.Data.PropertyData", b =>
                {
                    b.HasOne("Module.Domain.Data.ModuleData", null)
                        .WithMany("ProperatyData")
                        .HasForeignKey("ModuleDataId");

                    b.HasOne("Module.Domain.Schema.Properties.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Data.WorkspaceData", null)
                        .WithMany("ProperatyData")
                        .HasForeignKey("WorkspaceDataId");

                    b.HasOne("Module.Domain.Schema.WorkspaceModule", null)
                        .WithMany("ProperatyData")
                        .HasForeignKey("WorkspaceModuleId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceConnectionData", b =>
                {
                    b.HasOne("Module.Domain.Data.WorkspaceData", "SourceWorkspaceData")
                        .WithMany("WorkspaceConnections")
                        .HasForeignKey("SourceWorkspaceDataId");

                    b.HasOne("Module.Domain.Data.WorkspaceData", "TargetWorkspaceData")
                        .WithMany()
                        .HasForeignKey("TargetWorkspaceDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.WorkspaceConnection", "WorkspaceConnection")
                        .WithMany()
                        .HasForeignKey("WorkspaceConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceWorkspaceData");

                    b.Navigation("TargetWorkspaceData");

                    b.Navigation("WorkspaceConnection");
                });

            modelBuilder.Entity("Module.Domain.Schema.Module", b =>
                {
                    b.HasOne("Module.Domain.Schema.Application", "Application")
                        .WithMany("Modules")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Module.Domain.Schema.ModuleBlockModule", b =>
                {
                    b.HasOne("Module.Domain.Schema.ModuleBlock", "ModuleBlock")
                        .WithMany("ModuleBlockModules")
                        .HasForeignKey("ModuleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("ModuleBlock");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.Property", b =>
                {
                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("Module.Domain.Schema.Module", null)
                        .WithMany("Properaties")
                        .HasForeignKey("ModuleId1");

                    b.HasOne("Module.Domain.Schema.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId");

                    b.HasOne("Module.Domain.Schema.Workspace", null)
                        .WithMany("Properaties")
                        .HasForeignKey("WorkspaceId1");

                    b.HasOne("Module.Domain.Schema.WorkspaceModule", "WorkspaceModule")
                        .WithMany()
                        .HasForeignKey("WorkspaceModuleId");

                    b.Navigation("Module");

                    b.Navigation("Workspace");

                    b.Navigation("WorkspaceModule");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.PropertyConnection", b =>
                {
                    b.HasOne("Module.Domain.Schema.Properties.Property", "SourceProperty")
                        .WithMany("SourcePropertyConnections")
                        .HasForeignKey("SourcePropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.Properties.Property", "TargetProperty")
                        .WithMany("TargetPropertyConnections")
                        .HasForeignKey("TargetPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceProperty");

                    b.Navigation("TargetProperty");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.PropertyFormula", b =>
                {
                    b.HasOne("Module.Domain.Schema.Properties.Property", "Property")
                        .WithMany("PropertyFormulas")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.ValidationRule", b =>
                {
                    b.HasOne("Module.Domain.Schema.Properties.Property", "Property")
                        .WithMany("ValidationRules")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Module.Domain.Schema.Workspace", b =>
                {
                    b.HasOne("Module.Domain.Schema.Application", "Application")
                        .WithMany("Workspaces")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceConnection", b =>
                {
                    b.HasOne("Module.Domain.Schema.Workspace", "SourceWorkspace")
                        .WithMany()
                        .HasForeignKey("SourceWorkspaceId");

                    b.HasOne("Module.Domain.Schema.Workspace", "TargetWorkspace")
                        .WithMany()
                        .HasForeignKey("TargetWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceWorkspace");

                    b.Navigation("TargetWorkspace");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModule", b =>
                {
                    b.HasOne("Module.Domain.Schema.Module", "Module")
                        .WithMany("WorkspaceModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.Workspace", "Workspace")
                        .WithMany("WorkspaceModules")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModuleBlock", b =>
                {
                    b.HasOne("Module.Domain.Schema.ModuleBlock", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Domain.Schema.Workspace", "Workspace")
                        .WithMany("WorkspaceModuleBlocks")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Module.Domain.Data.ModuleData", b =>
                {
                    b.Navigation("ProperatyData");
                });

            modelBuilder.Entity("Module.Domain.Data.WorkspaceData", b =>
                {
                    b.Navigation("ProperatyData");

                    b.Navigation("WorkspaceConnections");
                });

            modelBuilder.Entity("Module.Domain.Schema.Application", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Module.Domain.Schema.Module", b =>
                {
                    b.Navigation("Properaties");

                    b.Navigation("WorkspaceModules");
                });

            modelBuilder.Entity("Module.Domain.Schema.ModuleBlock", b =>
                {
                    b.Navigation("ModuleBlockModules");
                });

            modelBuilder.Entity("Module.Domain.Schema.Properties.Property", b =>
                {
                    b.Navigation("PropertyFormulas");

                    b.Navigation("SourcePropertyConnections");

                    b.Navigation("TargetPropertyConnections");

                    b.Navigation("ValidationRules");
                });

            modelBuilder.Entity("Module.Domain.Schema.Workspace", b =>
                {
                    b.Navigation("Properaties");

                    b.Navigation("WorkspaceModuleBlocks");

                    b.Navigation("WorkspaceModules");
                });

            modelBuilder.Entity("Module.Domain.Schema.WorkspaceModule", b =>
                {
                    b.Navigation("ProperatyData");
                });
#pragma warning restore 612, 618
        }
    }
}
